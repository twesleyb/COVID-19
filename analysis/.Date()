group_by                 package:dplyr                 R Documentation

_G_r_o_u_p _b_y _o_n_e _o_r _m_o_r_e _v_a_r_i_a_b_l_e_s

_D_e_s_c_r_i_p_t_i_o_n:

     Most data operations are done on groups defined by variables.
     ‘group_by()’ takes an existing tbl and converts it into a grouped
     tbl where operations are performed "by group". ‘ungroup()’ removes
     grouping.

_U_s_a_g_e:

     group_by(.data, ..., add = FALSE, .drop = group_by_drop_default(.data))
     
     ungroup(x, ...)
     
_A_r_g_u_m_e_n_t_s:

   .data: a tbl

     ...: Variables to group by. All tbls accept variable names. Some
          tbls will accept functions of variables. Duplicated groups
          will be silently dropped.

     add: When ‘add = FALSE’, the default, ‘group_by()’ will override
          existing groups. To add to the existing groups, use ‘add =
          TRUE’.

   .drop: When ‘.drop = TRUE’, empty groups are dropped. See
          ‘group_by_drop_default()’ for what the default value is for
          this argument.

       x: A ‘tbl()’

_V_a_l_u_e:

     A grouped data frame, unless the combination of ‘...’ and ‘add’
     yields a non empty set of grouping columns, a regular (ungrouped)
     data frame otherwise.

_T_b_l _t_y_p_e_s:

     ‘group_by()’ is an S3 generic with methods for the three built-in
     tbls. See the help for the corresponding classes and their manip
     methods for more details:

        • data.frame: grouped_df

        • data.table: dtplyr::grouped_dt

        • SQLite: ‘src_sqlite()’

        • PostgreSQL: ‘src_postgres()’

        • MySQL: ‘src_mysql()’

_S_c_o_p_e_d _g_r_o_u_p_i_n_g:

     The three scoped variants (‘group_by_all()’, ‘group_by_if()’ and
     ‘group_by_at()’) make it easy to group a dataset by a selection of
     variables.

_S_e_e _A_l_s_o:

     Other grouping functions: ‘group_by_all’, ‘group_indices’,
     ‘group_keys’, ‘group_map’, ‘group_nest’, ‘group_rows’,
     ‘group_size’, ‘group_trim’, ‘groups’

_E_x_a_m_p_l_e_s:

     by_cyl <- mtcars %>% group_by(cyl)
     
     # grouping doesn't change how the data looks (apart from listing
     # how it's grouped):
     by_cyl
     
     # It changes how it acts with the other dplyr verbs:
     by_cyl %>% summarise(
       disp = mean(disp),
       hp = mean(hp)
     )
     by_cyl %>% filter(disp == max(disp))
     
     # Each call to summarise() removes a layer of grouping
     by_vs_am <- mtcars %>% group_by(vs, am)
     by_vs <- by_vs_am %>% summarise(n = n())
     by_vs
     by_vs %>% summarise(n = sum(n))
     
     # To removing grouping, use ungroup
     by_vs %>%
       ungroup() %>%
       summarise(n = sum(n))
     
     # You can group by expressions: this is just short-hand for
     # a mutate/rename followed by a simple group_by
     mtcars %>% group_by(vsam = vs + am)
     
     # By default, group_by overrides existing grouping
     by_cyl %>%
       group_by(vs, am) %>%
       group_vars()
     
     # Use add = TRUE to instead append
     by_cyl %>%
       group_by(vs, am, add = TRUE) %>%
       group_vars()
     
     # when factors are involved, groups can be empty
     tbl <- tibble(
       x = 1:10,
       y = factor(rep(c("a", "c"), each  = 5), levels = c("a", "b", "c"))
     )
     tbl %>%
       group_by(y) %>%
       group_rows()
     

